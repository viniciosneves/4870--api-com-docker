/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-return */

import { PrismaClient, User } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma: PrismaClient = new PrismaClient();

// Mock de autores como usu√°rios
const authors = [
  {
    name: 'Ana Paula',
    username: 'anapaula_dev',
    email: 'ana@codeconnect.com',
    avatar:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/authors/anabeatriz_dev.png',
  },
  {
    name: 'Bruno Silva',
    username: 'brunodev',
    email: 'bruno@codeconnect.com',
    avatar:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/authors/anabeatriz_dev.png',
  },
  {
    name: 'Carla Souza',
    username: 'carlacodes',
    email: 'carla@codeconnect.com',
    avatar:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/authors/anabeatriz_dev.png',
  },
  {
    name: 'Diego Martins',
    username: 'diegomartins',
    email: 'diego@codeconnect.com',
    avatar:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/authors/anabeatriz_dev.png',
  },
];

// Fun√ß√£o utilit√°ria para gerar coment√°rios mockados
function mockComments(authorIds: string[], count = 2) {
  const texts = [
    '√ìtimo post! Muito esclarecedor.',
    'Parab√©ns pelo conte√∫do!',
    'Me ajudou bastante, obrigado(a)!',
    'Tenho uma d√∫vida sobre esse ponto...',
    'Excelente explica√ß√£o, continue assim.',
    'Gostei do exemplo pr√°tico.',
    'Muito bom, vou aplicar no meu projeto.',
    'Ficou alguma d√∫vida, mas vou pesquisar mais.',
    'Show! Compartilhando com amigos.',
    'Amei o post, ansioso(a) por mais!',
  ];

  const comments: { text: string; authorId: string }[] = [];
  for (let i = 0; i < count; i++) {
    const randomAuthorId =
      authorIds[Math.floor(Math.random() * authorIds.length)];
    comments.push({
      text: texts[Math.floor(Math.random() * texts.length)],
      authorId: randomAuthorId,
    });
  }
  return comments;
}

// Fun√ß√£o utilit√°ria para gerar likes aleat√≥rios
function randomLikes() {
  return Math.floor(Math.random() * 100) + 1;
}

const posts = [
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/introducao-ao-react.png',
    title: 'Introdu√ß√£o ao React',
    slug: 'introducao-ao-react',
    body: 'Neste post, vamos explorar os conceitos b√°sicos do React, uma biblioteca JavaScript para construir interfaces de usu√°rio. Vamos cobrir componentes, JSX e estados.',
    markdown:
      '```javascript\nfunction HelloComponent() {\n  return <h1>Hello, world!</h1>;\n}\n```',
    authorIndex: 0,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/css-grid-na-pratica.png',
    title: 'CSS Grid na Pr√°tica',
    slug: 'css-grid-na-pratica',
    body: 'Aprenda a criar layouts responsivos com CSS Grid. Este post aborda desde a defini√ß√£o de grid at√© a cria√ß√£o de layouts complexos de forma simples e eficaz.',
    markdown:
      '```css\n.grid-container {\n  display: grid;\n  grid-template-columns: auto auto auto;\n}\n```',
    authorIndex: 1,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/vuejs-para-iniciantes.png',
    title: 'Vue.js para Iniciantes',
    slug: 'vuejs-para-iniciantes',
    body: 'Vue.js √© um framework progressivo para a constru√ß√£o de interfaces de usu√°rio. Este guia inicial cobre as funcionalidades essenciais do Vue.',
    markdown:
      "```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Ol√° Vue!'\n  }\n})\n```",
    authorIndex: 2,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/dicas-de-acessibilidade-web.png',
    title: 'Dicas de Acessibilidade Web',
    slug: 'dicas-de-acessibilidade-web',
    body: 'Explorando a import√¢ncia da acessibilidade na web, este post oferece dicas pr√°ticas para tornar seus sites mais acess√≠veis a todos os usu√°rios.',
    markdown:
      '```html\n<a href="#" aria-label="Saiba mais sobre acessibilidade">Saiba mais</a>\n```',
    authorIndex: 3,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/introducao-ao-typescript.png',
    title: 'Introdu√ß√£o ao TypeScript',
    slug: 'introducao-ao-typescript',
    body: 'Este post √© um guia introdut√≥rio ao TypeScript, explicando como ele aumenta a produtividade e melhora a manuten√ß√£o do c√≥digo JavaScript.',
    markdown:
      "```typescript\nfunction greeter(person: string) {\n  return 'Hello, ' + person;\n}\n```",
    authorIndex: 0,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/otimizacao-de-performance-no-react.png',
    title: 'Otimiza√ß√£o de Performance no React',
    slug: 'otimizacao-de-performance-no-react',
    body: 'Discutindo t√©cnicas avan√ßadas para otimizar a performance de aplica√ß√µes React, este post aborda conceitos como memoiza√ß√£o e lazy loading.',
    markdown:
      '```javascript\nconst MemoizedComponent = React.memo(function MyComponent(props) {\n  /* render using props */\n});\n```',
    authorIndex: 1,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/explorando-flexbox-no-css.png',
    title: 'Explorando Flexbox no CSS',
    slug: 'explorando-flexbox-no-css',
    body: 'Este post detalha o uso do Flexbox para criar layouts responsivos e flex√≠veis no CSS, com exemplos pr√°ticos para um entendimento f√°cil.',
    markdown:
      '```css\n.flex-container {\n  display: flex;\n  justify-content: space-around;\n}\n```',
    authorIndex: 2,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/angular-primeiros-passos.png',
    title: 'Angular: Primeiros Passos',
    slug: 'angular-primeiros-passos',
    body: 'Ideal para iniciantes, este post introduz o Angular, um poderoso framework para desenvolvimento de aplica√ß√µes web, com um exemplo b√°sico.',
    markdown:
      "```typescript\n@Component({\n  selector: 'my-app',\n  template: '<h1>Ol√° Angular</h1>'\n})\nexport class AppComponent { }\n```",
    authorIndex: 3,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/gerenciamento-de-estado-com-redux.png',
    title: 'Gerenciamento de Estado com Redux',
    slug: 'gerenciamento-de-estado-com-redux',
    body: 'Abordando um dos aspectos cruciais no desenvolvimento de aplica√ß√µes React, este post ensina como gerenciar o estado de forma eficiente com Redux.',
    markdown:
      "```javascript\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ACTION_TYPE':\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n```",
    authorIndex: 0,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/sass-simplificando-o-css.png',
    title: 'Sass: Simplificando o CSS',
    slug: 'sass-simplificando-o-css',
    body: 'Este post explora como o pr√©-processador Sass pode simplificar e melhorar a escrita de CSS, atrav√©s de vari√°veis, mixins e fun√ß√µes.',
    markdown:
      '```scss\n$primary-color: #333;\nbody {\n  color: $primary-color;\n}\n```',
    authorIndex: 1,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/webpack-um-guia-para-iniciantes.png',
    title: 'Webpack: Um Guia para Iniciantes',
    slug: 'webpack-um-guia-para-iniciantes',
    body: 'Aprenda a configurar o Webpack, uma poderosa ferramenta de empacotamento de m√≥dulos, neste guia passo a passo para iniciantes.',
    markdown:
      "```javascript\nmodule.exports = {\n  entry: './path/to/my/entry/file.js'\n};\n```",
    authorIndex: 2,
    likes: randomLikes(),
  },
  {
    cover:
      'https://raw.githubusercontent.com/viniciosneves/code-connect-assets/main/posts/construindo-spa-com-vuejs.png',
    title: 'Construindo SPA com Vue.js',
    slug: 'construindo-spa-com-vuejs',
    body: 'Este post oferece um tutorial detalhado sobre como construir uma Single Page Application (SPA) eficiente e interativa usando o framework Vue.js.',
    markdown:
      "```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Bem-vindo √† sua SPA Vue.js!'\n  }\n});\n```",
    authorIndex: 3,
    likes: randomLikes(),
  },
];

async function main(): Promise<void> {
  console.log('üå± Iniciando seed...');

  // Limpar dados existentes
  console.log('üßπ Limpando dados existentes...');
  await prisma.comment.deleteMany({});
  await prisma.post.deleteMany({});
  await prisma.user.deleteMany({});

  // Criar usu√°rios/autores
  console.log('üë• Criando autores...');
  const hashedPassword = await bcrypt.hash('123456', 10);

  const createdAuthors: User[] = [];
  for (const author of authors) {
    const createdAuthor = await prisma.user.create({
      data: {
        ...author,
        password: hashedPassword,
      },
    });
    createdAuthors.push(createdAuthor);
    console.log(
      `‚úÖ Autor criado: ${createdAuthor.name} (${createdAuthor.username})`,
    );
  }

  const authorIds: string[] = createdAuthors.map((author) => author.id);

  // Criar posts
  console.log('üìù Criando posts...');
  for (const postData of posts) {
    const { authorIndex, ...postInfo } = postData;
    const author = createdAuthors[authorIndex];
    if (!author) {
      throw new Error(`Autor n√£o encontrado no √≠ndice ${authorIndex}`);
    }
    const authorId = author.id;

    const createdPost = await prisma.post.create({
      data: {
        ...postInfo,
        authorId: authorId,
      },
    });

    console.log(`‚úÖ Post criado: ${createdPost.title}`);

    // Criar coment√°rios para cada post
    const comments = mockComments(authorIds, Math.floor(Math.random() * 4) + 1);
    for (const commentData of comments) {
      await prisma.comment.create({
        data: {
          ...commentData,
          postId: createdPost.id,
        },
      });
    }
    console.log(`üí¨ Coment√°rios criados para: ${createdPost.title}`);
  }

  console.log('üéâ Seed conclu√≠do com sucesso!');
}

main()
  .catch((e: Error) => {
    console.error('‚ùå Erro durante o seed:', e);
    process.exit(1);
  })
  .finally(() => {
    void prisma.$disconnect();
  });
